class Book:
    def __init__(self, title, author, isbn):
        self.title = title  # Название книги
        self.author = author  # Автор книги
        self.isbn = isbn  # Уникальный идентификатор книги (ISBN)
        self.is_borrowed = False  # Статус книги: по умолчанию не взята на чтение

    def __str__(self):
        status = "Borrowed" if self.is_borrowed else "Available"  # Определение статуса книги
        return f"Title: {self.title}, Author: {self.author}, ISBN: {self.isbn}, Status: {status}"  # Форматированная строка с информацией о книге

class Reader:
    def __init__(self, name, reader_id):
        self.name = name  # Имя читателя
        self.reader_id = reader_id  # Уникальный идентификатор читателя
        self.borrowed_books = []  # Список книг, взятых читателем

    @property
    def borrowed_books_info(self):
        return [str(book) for book in self.borrowed_books]  # Возвращает список строк с информацией о взятых книгах

    def borrow_book(self, book):
        if not book.is_borrowed:  # Если книга не взята
            book.is_borrowed = True  # Помечаем книгу как взятую
            self.borrowed_books.append(book)  # Добавляем книгу в список взятых
            print(f"{self.name} borrowed '{book.title}'")  # Сообщение о взятии книги
        else:
            print(f"'{book.title}' is already borrowed")  # Сообщение, если книга уже взята

    def return_book(self, book):
        if book in self.borrowed_books:  # Если книга была взята этим читателем
            book.is_borrowed = False  # Помечаем книгу как доступную
            self.borrowed_books.remove(book)  # Удаляем книгу из списка взятых
            print(f"{self.name} returned '{book.title}'")  # Сообщение о возврате книги
        else:
            print(f"'{book.title}' was not borrowed by {self.name}")  # Сообщение, если книга не была взята этим читателем

class LibraryManager:
    def __init__(self):
        self.books = {}  # Словарь для хранения книг (ключ - ISBN, значение - объект Book)
        self.readers = {}  # Словарь для хранения читателей (ключ - reader_id, значение - объект Reader)

    def add_book(self, title, author, isbn):
        if isbn in self.books:  # Если книга с таким ISBN уже существует
            print(f"Book with ISBN {isbn} already exists")  # Сообщение о дубликате
        else:
            self.books[isbn] = Book(title, author, isbn)  # Добавляем новую книгу в словарь
            print(f"Added book: '{title}' by {author}")  # Сообщение о добавлении книги

    def add_reader(self, name, reader_id):
        if reader_id in self.readers:  # Если читатель с таким ID уже существует
            print(f"Reader with ID {reader_id} already exists")  # Сообщение о дубликате
        else:
            self.readers[reader_id] = Reader(name, reader_id)  # Добавляем нового читателя в словарь
            print(f"Added reader: {name} with ID {reader_id}")  # Сообщение о добавлении читателя

    def find_book_by_title(self, title):
        found_books = [book for book in self.books.values() if book.title.lower() == title.lower()]  # Поиск книг по названию (без учета регистра)
        if found_books:
            print(f"Found {len(found_books)} book(s) with title '{title}':")  # Сообщение о количестве найденных книг
            for book in found_books:
                print(book)  # Вывод информации о каждой найденной книге
        else:
            print(f"No books found with title '{title}'")  # Сообщение, если книги не найдены

    def find_book_by_author(self, author):
        found_books = [book for book in self.books.values() if book.author.lower() == author.lower()]  # Поиск книг по автору (без учета регистра)
        if found_books:
            print(f"Found {len(found_books)} book(s) by author '{author}':")  # Сообщение о количестве найденных книг
            for book in found_books:
                print(book)  # Вывод информации о каждой найденной книге
        else:
            print(f"No books found by author '{author}'")  # Сообщение, если книги не найдены

    def borrow_book(self, reader_id, isbn):
        reader = self.readers.get(reader_id)  # Получаем читателя по ID
        book = self.books.get(isbn)  # Получаем книгу по ISBN

        if reader and book:  # Если читатель и книга существуют
            reader.borrow_book(book)  # Вызываем метод взятия книги
        else:
            print("Reader or book not found")  # Сообщение, если читатель или книга не найдены

    def return_book(self, reader_id, isbn):
        reader = self.readers.get(reader_id)  # Получаем читателя по ID
        book = self.books.get(isbn)  # Получаем книгу по ISBN

        if reader and book:  # Если читатель и книга существуют
            reader.return_book(book)  # Вызываем метод возврата книги
        else:
            print("Reader or book not found")  # Сообщение, если читатель или книга не найдены

    def list_all_books(self):
        if self.books:  # Если в библиотеке есть книги
            print("All books in the library:")  # Заголовок списка книг
            for book in self.books.values():
                print(book)  # Вывод информации о каждой книге
        else:
            print("No books in the library")  # Сообщение, если книг нет

    def list_all_readers(self):
        if self.readers:  # Если в библиотеке есть читатели
            print("All readers in the library:")  # Заголовок списка читателей
            for reader in self.readers.values():
                print(f"Name: {reader.name}, ID: {reader.reader_id}")  # Вывод информации о каждом читателе
        else:
            print("No readers in the library")  # Сообщение, если читателей нет

# Пример использования
library = LibraryManager()  # Создаем объект библиотеки

# Добавляем книги
library.add_book("1984", "George Orwell", "9780451524935")  # Добавляем книгу "1984"
library.add_book("To Kill a Mockingbird", "Harper Lee", "9780446310789")  # Добавляем книгу "To Kill a Mockingbird"
library.add_book("The Great Gatsby", "F. Scott Fitzgerald", "9780743273565")  # Добавляем книгу "The Great Gatsby"

# Добавляем читателей
library.add_reader("Alice", 1)  # Добавляем читателя Alice
library.add_reader("Bob", 2)  # Добавляем читателя Bob

# Выводим все книги и читателей
library.list_all_books()  # Вывод списка всех книг
library.list_all_readers()  # Вывод списка всех читателей

# Поиск книг по названию и автору
library.find_book_by_title("1984")  # Поиск книги по названию "1984"
library.find_book_by_author("Harper Lee")  # Поиск книг по автору "Harper Lee"

# Выдача и возврат книг
library.borrow_book(1, "9780451524935")  # Alice берет книгу "1984"
library.borrow_book(2, "9780446310789")  # Bob берет книгу "To Kill a Mockingbird"

# Возврат книги
library.return_book(1, "9780451524935")  # Alice возвращает книгу "1984"
